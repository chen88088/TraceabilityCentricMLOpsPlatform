# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2021-01-13 19:04:15
"""

# 必須由ArcGIS的python環境執行
import logging
import shutil

import arcpy
import os
import glob
from configs.config import workspace, SHP_Path, IMG_Path, field, Mask_Path, Tool_box, sql_query
    

logger = logging.getLogger(__name__)

def Model(workspace, field, outpath, shp, file, out_name):
    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True
    arcpy.ImportToolbox(Tool_box)
    # Model Environment settings
    with arcpy.EnvManager(scratchWorkspace=workspace,
                          workspace=workspace):
        tif = arcpy.Raster(file)

        # Process: Polygon to Raster (Polygon to Raster) (conversion)
        outraster = workspace + out_name

        # 設定新增欄位名稱
        rice = "rice"
        fieldPrecision = 10
        fieldAlias = "refcode"

        # 產生Raster，並新增欄位
        arcpy.MakeFeatureLayer_management(shp, "annotation_lyr")
        arcpy.management.AddField("annotation_lyr", rice, "LONG", fieldPrecision,
                                  field_alias=fieldAlias, field_is_nullable="NULLABLE")

        # 搜尋水稻成長期(12)&黃熟期(13)，並標記為 "1"
        try:
            arcpy.SelectLayerByAttribute_management("annotation_lyr", "NEW_SELECTION", sql_query)#if this throws an exception, it is highly likely that the sql query failed to execute
            arcpy.CalculateField_management("annotation_lyr", rice, "1", "PYTHON3")
        except:
            print("The sql query failed. Something might be wrong with the .shp file.")
            exit(1)

        
        # 輸出SHP
        # arcpy.FeatureClassToShapefile_conversion("annotation_lyr", r"C:\Users\Jacky\Desktop\0810")

        # PolygonToRaster & 輸出PNG (rice & 坵塊)

        value_field = [rice]
        outputpath =[outpath]

        for fieldname, path in zip(value_field, outputpath):

            with arcpy.EnvManager(cellSize=tif,
                                  extent=tif,
                                  scratchWorkspace=workspace,
                                  snapRaster=tif,
                                  workspace=workspace):
                arcpy.conversion.PolygonToRaster(in_features=shp, value_field=fieldname,
                                                 out_rasterdataset=outraster,
                                                 cell_assignment="CELL_CENTER",
                                                 priority_field="NONE",
                                                 cellsize=file)

            with arcpy.EnvManager(extent=tif,
                                  outputCoordinateSystem="PROJCS['TWD_1997_Transverse_Mercator',"
                                                         "GEOGCS['GCS_TWD_1997',DATUM['D_TWD_1997',"
                                                         "SPHEROID['GRS_1980',6378137.0,298.257222101]],"
                                                         "PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],"
                                                         "PROJECTION['Transverse_Mercator'],PARAMETER['false_easting',250000.0],"
                                                         "PARAMETER['false_northing',0.0],PARAMETER['central_meridian',121.0],"
                                                         "PARAMETER['scale_factor',0.9999],PARAMETER['latitude_of_origin',0.0],"
                                                         "UNIT['Meter',1.0]]",
                                  rasterStatistics="NONE"):
                arcpy.conversion.RasterToOtherFormat(Input_Rasters=[outraster],
                                                                                Output_Workspace=path,
                                                                                Raster_Format="PNG")[0]



def generate_intermediate_mask():
    All_IMG_Path = IMG_Path + "//*.tif"
    files = glob.glob(All_IMG_Path)

    if os.path.isdir(Mask_Path):
        shutil.rmtree(Mask_Path)
    #os.mkdir(Mask_Path)
    os.makedirs(Mask_Path, exist_ok=True)

    

    for file in files:
        out_name = r"/t" + os.path.basename(file).split('_')[0] + "_" + os.path.basename(file).split('_')[1]
        shp_name = SHP_Path + "/PD_" + os.path.basename(file).split('.')[0] + ".shp"
        logger.info("file:" + file)
        logger.info("out_name:" + out_name)
        logger.info("shp_name:" + shp_name)

        Model(workspace, field, Mask_Path, shp_name, file, out_name)
