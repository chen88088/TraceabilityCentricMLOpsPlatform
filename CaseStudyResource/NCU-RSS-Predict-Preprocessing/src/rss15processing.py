import arcpy
import numpy as np
from PIL import Image

import os
import glob
import shutil

from configs.config import workspace, IMG_Path, SHP_Path, save_polyline, directory, Data_root_folder_path

Image.MAX_IMAGE_PIXELS = None

"""
Generated by ArcGIS ModelBuilder on : 2021-09-28 13:13:45
Ouput all polyline with value 1.
"""


def create_polyline(polygon_shp, tif, save_line, workspace):  # Model 4

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True

    polygon = polygon_shp

    # Process: Polygon To Line (Polygon To Line) (management)
    # output polyline shp
    # environment> coordinate system: TWD1997(TIF), extent: TIF
    polyline_shp = workspace + r'\Line'
    with arcpy.EnvManager(extent=tif, outputCoordinateSystem="PROJCS['TWD_1997_Transverse_Mercator',\
                          GEOGCS['GCS_TWD_1997',DATUM['D_TWD_1997',SPHEROID['GRS_1980',6378137.0,298.257222101]],\
                          PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],\
                          PARAMETER['false_easting',250000.0],PARAMETER['false_northing',0.0],PARAMETER['central_meridian',121.0],\
                          PARAMETER['scale_factor',0.9999],PARAMETER['latitude_of_origin',0.0],UNIT['Meter',1.0]]"):
        arcpy.management.PolygonToLine(in_features=polygon_shp,
                                       out_feature_class=polyline_shp,
                                       neighbor_option="IGNORE_NEIGHBORS")

        # Process: Calculate Field (Calculate Field) (management)
        # create attribute in polyline shp
        # input table: polyline shp, field name: color, color:255
        calculated_tabel = arcpy.management.CalculateField(in_table=polyline_shp,
                                                           field="Color", expression="255",
                                                           expression_type="PYTHON3",
                                                           code_block="", field_type="TEXT",
                                                           enforce_domains="NO_ENFORCE_DOMAINS")[0]
    # Process: Polyline to Raster (Polyline to Raster) (conversion)
    # output a raster
    # input feature: polyline shp, value field: color, cellsize: TIF
    # Environment> coordinate system: TWD 1997, extent: TIF,  cellsize: TIF
    polyline_raster = workspace + '\\PolylineToRaster'
    with arcpy.EnvManager(cellSize=tif, extent=tif,
                          outputCoordinateSystem="PROJCS['TWD_1997_Transverse_Mercator',\
                          GEOGCS['GCS_TWD_1997',DATUM['D_TWD_1997',SPHEROID['GRS_1980',6378137.0,298.257222101]],\
                          PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],\
                          PARAMETER['false_easting',250000.0],PARAMETER['false_northing',0.0],\
                          PARAMETER['central_meridian',121.0],PARAMETER['scale_factor',0.9999],\
                          PARAMETER['latitude_of_origin',0.0],UNIT['Meter',1.0]]"):
        arcpy.conversion.PolylineToRaster(in_features=calculated_tabel, value_field="Color",
                                          out_rasterdataset=polyline_raster, cell_assignment="MAXIMUM_LENGTH",
                                          priority_field="NONE", cellsize=tif, build_rat="BUILD")

    # Process: Copy Raster (Copy Raster) (management)
    # output a PNG
    # input raster: raster from previous step, output raster dataset:xxx.png
    # environment> coordinate system: TWD1997, extend: TIF, cellsize: TIF
    polyline_png = save_line + '\\' + os.path.basename(tif).split('.')[0] + '.png'
    with arcpy.EnvManager(cellSize=tif, extent=tif,
                          outputCoordinateSystem="PROJCS['TWD_1997_Transverse_Mercator',\
                          GEOGCS['GCS_TWD_1997',DATUM['D_TWD_1997',SPHEROID['GRS_1980',6378137.0,298.257222101]],\
                          PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],\
                          PARAMETER['false_easting',250000.0],PARAMETER['false_northing',0.0],\
                          PARAMETER['central_meridian',121.0],PARAMETER['scale_factor',0.9999],\
                          PARAMETER['latitude_of_origin',0.0],UNIT['Meter',1.0]]"):
        arcpy.management.CopyRaster(in_raster=polyline_raster, out_rasterdataset=polyline_png,
                                    config_keyword="", background_value=None, nodata_value="",
                                    onebit_to_eightbit="NONE", colormap_to_RGB="NONE",
                                    pixel_type="", scale_pixel_value="NONE", RGB_to_Colormap="NONE",
                                    format="PNG", transform="NONE", process_as_multidimensional="CURRENT_SLICE",
                                    build_multidimensional_transpose="NO_TRANSPOSE")


def combine_to_parcel(polygons, polylines, parcel_path):
    '''
    TODO:確認polyline的pixel是多少
    該函式將polyine的mask覆蓋到原本的gt mask上方。
    '''
    for polygon, polyline in zip(polygons, polylines):
        poly = np.array(Image.open(polygon))
        polyl = np.array(Image.open(polyline))
        output = np.where(polyl == 1, 0, poly)
        image = Image.fromarray(output)
        filename = os.path.basename(polyline).split('.')[0]
        filename1 = filename.split("_")
        image.save(parcel_path + '/' + filename1[0] + "_" + filename1[1] + '.png')


def rss15processing(Mask_Path, output_path):
    """
    Shapefile to polyline
    """
    All_IMG_Path = IMG_Path + "//*.tif"
    All_SHP_Path = SHP_Path + "//*.shp"
    files = glob.glob(All_IMG_Path)
    shps = glob.glob(All_SHP_Path)
    save_polyline1 = save_polyline

    if os.path.isdir(save_polyline1):
        shutil.rmtree(save_polyline1)
    os.mkdir(save_polyline1)
    with arcpy.EnvManager(scratchWorkspace=workspace, workspace=workspace):
        for file, shp in zip(files, shps):
            create_polyline(shp, file, save_polyline1, workspace)

    """
    Combine polygon & polyline, to generate the mask for NCU RSS 1.4
    """
    polygons_path = Mask_Path + "//*.png"
    polygons = glob.glob(polygons_path)
    polyline_path = save_polyline1 + "//*.png"
    polylines = glob.glob(polyline_path)
    if os.path.isdir(output_path):
        shutil.rmtree(output_path)
    os.mkdir(output_path)
    combine_to_parcel(polygons, polylines, output_path)
